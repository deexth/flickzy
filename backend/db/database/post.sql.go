// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: post.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgconn"
	"github.com/jackc/pgx/v5/pgtype"
)

const createPost = `-- name: CreatePost :one
INSERT INTO posts(
    id, description, created_at, published_at, likes, blob, user_id, sharecount, repost
)VALUES(
    $1, $2, $3, $4, $5, $6, $7, $8, $9
)
RETURNING id, description, created_at, likes, sharecount, repost, blob, user_id, published_at
`

type CreatePostParams struct {
	ID          pgtype.UUID
	Description pgtype.Text
	CreatedAt   pgtype.Timestamptz
	PublishedAt pgtype.Timestamptz
	Likes       pgtype.Int4
	Blob        pgtype.Text
	UserID      pgtype.UUID
	Sharecount  pgtype.Int4
	Repost      pgtype.Int4
}

func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) (Post, error) {
	row := q.db.QueryRow(ctx, createPost,
		arg.ID,
		arg.Description,
		arg.CreatedAt,
		arg.PublishedAt,
		arg.Likes,
		arg.Blob,
		arg.UserID,
		arg.Sharecount,
		arg.Repost,
	)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Description,
		&i.CreatedAt,
		&i.Likes,
		&i.Sharecount,
		&i.Repost,
		&i.Blob,
		&i.UserID,
		&i.PublishedAt,
	)
	return i, err
}

const deletePost = `-- name: DeletePost :execresult
DELETE FROM posts WHERE id=$1 AND user_id=$2
`

type DeletePostParams struct {
	ID     pgtype.UUID
	UserID pgtype.UUID
}

func (q *Queries) DeletePost(ctx context.Context, arg DeletePostParams) (pgconn.CommandTag, error) {
	return q.db.Exec(ctx, deletePost, arg.ID, arg.UserID)
}

const getPosts = `-- name: GetPosts :many
SELECT id, description, created_at, likes, sharecount, repost, blob, user_id, published_at FROM posts
`

func (q *Queries) GetPosts(ctx context.Context) ([]Post, error) {
	rows, err := q.db.Query(ctx, getPosts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Post
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.Description,
			&i.CreatedAt,
			&i.Likes,
			&i.Sharecount,
			&i.Repost,
			&i.Blob,
			&i.UserID,
			&i.PublishedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserPosts = `-- name: GetUserPosts :many
SELECT id, description, created_at, likes, sharecount, repost, blob, user_id, published_at FROM posts WHERE user_id=$1
`

func (q *Queries) GetUserPosts(ctx context.Context, userID pgtype.UUID) ([]Post, error) {
	rows, err := q.db.Query(ctx, getUserPosts, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Post
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.Description,
			&i.CreatedAt,
			&i.Likes,
			&i.Sharecount,
			&i.Repost,
			&i.Blob,
			&i.UserID,
			&i.PublishedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
