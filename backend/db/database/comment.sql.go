// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: comment.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgconn"
	"github.com/jackc/pgx/v5/pgtype"
)

const createComment = `-- name: CreateComment :one
INSERT INTO comments(
    id, description, created_at, published_at, likes, blob, user_id, post_id
)VALUES(
    $1, $2, $3, $4, $5, $6, $7, $8
)
RETURNING id, created_at, published_at, description, blob, likes, post_id, user_id
`

type CreateCommentParams struct {
	ID          pgtype.UUID
	Description pgtype.Text
	CreatedAt   pgtype.Timestamptz
	PublishedAt pgtype.Timestamptz
	Likes       pgtype.Int4
	Blob        pgtype.Text
	UserID      pgtype.UUID
	PostID      pgtype.UUID
}

func (q *Queries) CreateComment(ctx context.Context, arg CreateCommentParams) (Comment, error) {
	row := q.db.QueryRow(ctx, createComment,
		arg.ID,
		arg.Description,
		arg.CreatedAt,
		arg.PublishedAt,
		arg.Likes,
		arg.Blob,
		arg.UserID,
		arg.PostID,
	)
	var i Comment
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.PublishedAt,
		&i.Description,
		&i.Blob,
		&i.Likes,
		&i.PostID,
		&i.UserID,
	)
	return i, err
}

const deleteComment = `-- name: DeleteComment :execresult
DELETE FROM comments WHERE id=$1 AND user_id=$2 AND post_id=$3
`

type DeleteCommentParams struct {
	ID     pgtype.UUID
	UserID pgtype.UUID
	PostID pgtype.UUID
}

func (q *Queries) DeleteComment(ctx context.Context, arg DeleteCommentParams) (pgconn.CommandTag, error) {
	return q.db.Exec(ctx, deleteComment, arg.ID, arg.UserID, arg.PostID)
}

const getComments = `-- name: GetComments :many
SELECT id, created_at, published_at, description, blob, likes, post_id, user_id FROM comments WHERE post_id=$1
`

func (q *Queries) GetComments(ctx context.Context, postID pgtype.UUID) ([]Comment, error) {
	rows, err := q.db.Query(ctx, getComments, postID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Comment
	for rows.Next() {
		var i Comment
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.PublishedAt,
			&i.Description,
			&i.Blob,
			&i.Likes,
			&i.PostID,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
