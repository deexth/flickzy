// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: user.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgconn"
	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users(
    id, email, created_at, updated_at, api_token, username
)VALUES(
    $1, $2, $3, $4, $5, $6
)
RETURNING id, email, username, api_token, created_at, updated_at
`

type CreateUserParams struct {
	ID        pgtype.UUID
	Email     string
	CreatedAt pgtype.Timestamptz
	UpdatedAt pgtype.Timestamptz
	ApiToken  string
	Username  string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.ID,
		arg.Email,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.ApiToken,
		arg.Username,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Username,
		&i.ApiToken,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :execresult
DELETE FROM users WHERE id = $1 AND username=$2
`

type DeleteUserParams struct {
	ID       pgtype.UUID
	Username string
}

func (q *Queries) DeleteUser(ctx context.Context, arg DeleteUserParams) (pgconn.CommandTag, error) {
	return q.db.Exec(ctx, deleteUser, arg.ID, arg.Username)
}

const deleteUserOTP = `-- name: DeleteUserOTP :execresult
DELETE FROM userotp WHERE email = $1 AND otp=$2
`

type DeleteUserOTPParams struct {
	Email string
	Otp   int32
}

func (q *Queries) DeleteUserOTP(ctx context.Context, arg DeleteUserOTPParams) (pgconn.CommandTag, error) {
	return q.db.Exec(ctx, deleteUserOTP, arg.Email, arg.Otp)
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, email, created_at, updated_at, api_token FROM users WHERE email=$1
`

type GetUserByEmailRow struct {
	ID        pgtype.UUID
	Email     string
	CreatedAt pgtype.Timestamptz
	UpdatedAt pgtype.Timestamptz
	ApiToken  string
}

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (GetUserByEmailRow, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i GetUserByEmailRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ApiToken,
	)
	return i, err
}

const getUserByOTP = `-- name: GetUserByOTP :one
SELECT email, otp, expires_at FROM userotp WHERE email=$1 AND otp=$2
`

type GetUserByOTPParams struct {
	Email string
	Otp   int32
}

func (q *Queries) GetUserByOTP(ctx context.Context, arg GetUserByOTPParams) (Userotp, error) {
	row := q.db.QueryRow(ctx, getUserByOTP, arg.Email, arg.Otp)
	var i Userotp
	err := row.Scan(&i.Email, &i.Otp, &i.ExpiresAt)
	return i, err
}

const getUserByToken = `-- name: GetUserByToken :one
SELECT id, email, created_at, updated_at, api_token FROM users WHERE api_token=$1
`

type GetUserByTokenRow struct {
	ID        pgtype.UUID
	Email     string
	CreatedAt pgtype.Timestamptz
	UpdatedAt pgtype.Timestamptz
	ApiToken  string
}

func (q *Queries) GetUserByToken(ctx context.Context, apiToken string) (GetUserByTokenRow, error) {
	row := q.db.QueryRow(ctx, getUserByToken, apiToken)
	var i GetUserByTokenRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ApiToken,
	)
	return i, err
}

const handleOTP = `-- name: HandleOTP :one
INSERT INTO userotp(
    email, expires_at, otp
)VALUES(
    $1, $2, $3
)
RETURNING email, otp, expires_at
`

type HandleOTPParams struct {
	Email     string
	ExpiresAt pgtype.Timestamptz
	Otp       int32
}

func (q *Queries) HandleOTP(ctx context.Context, arg HandleOTPParams) (Userotp, error) {
	row := q.db.QueryRow(ctx, handleOTP, arg.Email, arg.ExpiresAt, arg.Otp)
	var i Userotp
	err := row.Scan(&i.Email, &i.Otp, &i.ExpiresAt)
	return i, err
}

const updateApiToken = `-- name: UpdateApiToken :execresult
UPDATE users SET api_token = $1 WHERE email = $2
`

type UpdateApiTokenParams struct {
	ApiToken string
	Email    string
}

func (q *Queries) UpdateApiToken(ctx context.Context, arg UpdateApiTokenParams) (pgconn.CommandTag, error) {
	return q.db.Exec(ctx, updateApiToken, arg.ApiToken, arg.Email)
}

const updateUserEmail = `-- name: UpdateUserEmail :execresult
UPDATE users SET email = $1, updated_at = $2 WHERE email = $3
`

type UpdateUserEmailParams struct {
	Email     string
	UpdatedAt pgtype.Timestamptz
	Email_2   string
}

func (q *Queries) UpdateUserEmail(ctx context.Context, arg UpdateUserEmailParams) (pgconn.CommandTag, error) {
	return q.db.Exec(ctx, updateUserEmail, arg.Email, arg.UpdatedAt, arg.Email_2)
}
